<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>数据库语言四大分类</title>
    <url>/article/42b03218.html</url>
    <content><![CDATA[<h1 id="数据库语言四大分类"><a href="#数据库语言四大分类" class="headerlink" title="数据库语言四大分类"></a>数据库语言四大分类</h1><p><img src="https://gitee.com/hlmin/blog-image/raw/master/image/20210605153908.jpeg"></p>
<h3 id="1、数据定义语言DDL（Data-Ddefinition-Language）"><a href="#1、数据定义语言DDL（Data-Ddefinition-Language）" class="headerlink" title="1、数据定义语言DDL（Data Ddefinition Language）"></a>1、数据定义语言DDL（Data Ddefinition Language）</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">CREATE , DROP , ALTER , TRUNCATE</span><br></pre></td></tr></table></figure>

<blockquote>
<p>主要为以上操作 即<code>对逻辑结构等有操作的</code>，其中包括表结构，视图和索引。</p>
</blockquote>
<a id="more"></a>

<h4 id="1、CREATE操作"><a href="#1、CREATE操作" class="headerlink" title="1、CREATE操作"></a>1、CREATE操作</h4><h5 id="1、创建数据库"><a href="#1、创建数据库" class="headerlink" title="1、创建数据库"></a>1、创建数据库</h5> <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">create database 数据库名 ;</span><br></pre></td></tr></table></figure>

<h5 id="2、创建表"><a href="#2、创建表" class="headerlink" title="2、创建表"></a>2、创建表</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">create table 表名(</span><br><span class="line">    id int ,</span><br><span class="line">    spend int ,</span><br><span class="line">    cid int ,</span><br><span class="line">    comment varchar(255) ,</span><br><span class="line">    date DATE</span><br><span class="line">)ENGINE&#x3D;InnoDB DEFAULT CHARSET&#x3D;utf8;</span><br><span class="line"># default charset &#x3D; utf8 ----&gt;表示该表按照UTF-8的编码存放中文;</span><br><span class="line"># ENGINE &#x3D; InnoDB ----&gt;mysql的一种存储引擎，MyISAM和InnoDB是其中常用的两种；</span><br><span class="line"># 这里使用ENGINE&#x3D;InnoDB 是因为后续要使用的外键约束只有在InnoDB中才生效。</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ENGINE&#x3D;InnoDB DEFAULT CHARSET&#x3D;utf8;</span><br></pre></td></tr></table></figure>

<ul>
<li><p>default charset = utf8 —-&gt;表示该表按照UTF-8的编码存放中文;</p>
</li>
<li><p>ENGINE = InnoDB —-&gt;mysql的一种存储引擎，MyISAM和InnoDB是其中常用的两种；</p>
</li>
<li><p>这里使用ENGINE=InnoDB 是因为后续要使用的外键约束只有在InnoDB中才生效。</p>
</li>
</ul>
<h5 id="3、创建索引"><a href="#3、创建索引" class="headerlink" title="3、创建索引"></a>3、创建索引</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">CREATE  INDEX  索引名称  ON  表名 ( 列名 [ ASC | DESC ]  [ , 列名 [ ASC | DESC ] , ... ] ) ;</span><br></pre></td></tr></table></figure>

<p>语法说明如下：</p>
<ul>
<li><code>&lt;索引名&gt;</code>：指定索引名。一个表可以创建多个索引，但每个索引在该表中的名称是唯一的。</li>
<li><code>&lt;表名&gt;</code>：指定要创建索引的表名。</li>
<li><code>&lt;列名&gt;</code>：指定要创建索引的列名。通常可以考虑将查询语句中在 JOIN 子句和 WHERE 子句里经常出现的列作为索引列。</li>
<li><code>&lt;长度&gt;</code>：可选项。指定使用列前的 length 个字符来创建索引。使用列的一部分创建索引有利于减小索引文件的大小，节省索引列所占的空间。在某些情况下，只能对列的前缀进行索引。索引列的长度有一个最大上限 255 个字节（MyISAM 和 InnoDB 表的最大上限为 1000 个字节），如果索引列的长度超过了这个上限，就只能用列的前缀进行索引。另外，BLOB 或 TEXT 类型的列也必须使用前缀索引。</li>
<li><code>ASC|DESC</code>：可选项。<code>ASC</code>指定索引按照升序来排列，<code>DESC</code>指定索引按照降序来排列，默认为<code>ASC</code>。</li>
</ul>
<p>比如：</p>
<p>建表之后创建索引：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">create index id_indedx on user(id asc);</span><br></pre></td></tr></table></figure>

<p>建表时创建索引：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">CREATE TABLE t(</span><br><span class="line">   c1 INT PRIMARY KEY,</span><br><span class="line">   c2 INT NOT NULL,</span><br><span class="line">   c3 INT NOT NULL,</span><br><span class="line">   c4 VARCHAR(10),</span><br><span class="line">   INDEX (c2,c3) </span><br><span class="line">);</span><br></pre></td></tr></table></figure>



<h5 id="4、创建视图"><a href="#4、创建视图" class="headerlink" title="4、创建视图"></a>4、创建视图</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">CREATE VIEW &lt;视图名&gt; AS &lt;SELECT语句&gt;</span><br></pre></td></tr></table></figure>

<p>语法说明如下。</p>
<ul>
<li><code>&lt;视图名&gt;</code>：指定视图的名称。该名称在数据库中必须是唯一的，不能与其他表或视图同名。</li>
<li>&lt;SELECT语句&gt;：指定创建视图的 SELECT 语句，可用于查询多个基础表或源视图。</li>
</ul>
<h4 id="2、DROP操作"><a href="#2、DROP操作" class="headerlink" title="2、DROP操作"></a>2、DROP操作</h4><h6 id="1、删除数据库"><a href="#1、删除数据库" class="headerlink" title="1、删除数据库"></a>1、删除数据库</h6><p>使用 DROP DATABASE 命令时要非常谨慎，在执行该命令后，MySQL 不会给出任何提示确认信息。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">DROP DATABASE [ IF EXISTS ] &lt;数据库名&gt;</span><br><span class="line">#推荐使用</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">DROP DATABASE &lt;数据库名&gt;</span><br><span class="line">#当该数据库不存在时，执行会报错</span><br></pre></td></tr></table></figure>

<h6 id="2、删除数据表"><a href="#2、删除数据表" class="headerlink" title="2、删除数据表"></a>2、删除数据表</h6><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">DROP TABLE &lt;表名&gt;</span><br></pre></td></tr></table></figure>

<p>删除表的结构和数据。</p>
<h4 id="3、ALTER操作"><a href="#3、ALTER操作" class="headerlink" title="3、ALTER操作"></a>3、ALTER操作</h4><h6 id="1、删除列"><a href="#1、删除列" class="headerlink" title="1、删除列"></a>1、删除列</h6><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ALTER TABLE &lt;表名&gt; DROP &lt;列名&gt;</span><br></pre></td></tr></table></figure>

<h6 id="2、增加列"><a href="#2、增加列" class="headerlink" title="2、增加列"></a>2、增加列</h6><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ALTER TABLE &lt;表名&gt; ADD &lt;列名&gt; &lt;类型&gt;</span><br><span class="line">alter table table1 add transactor varchar(10) not Null;</span><br></pre></td></tr></table></figure>

<h6 id="3、重命名列"><a href="#3、重命名列" class="headerlink" title="3、重命名列"></a>3、重命名列</h6><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ALTER TABLE &lt;表名&gt; CHANGE &lt;列名&gt; &lt;新名&gt; </span><br></pre></td></tr></table></figure>

<h6 id="4、修改数据库信息"><a href="#4、修改数据库信息" class="headerlink" title="4、修改数据库信息"></a>4、修改数据库信息</h6><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ALTER DATABASE &lt;数据库名&gt;</span><br><span class="line">-&gt; DEFAULT CHARACTER SET gb2312</span><br><span class="line">-&gt; DEFAULT COLLATE gb2312_chinese_ci;</span><br></pre></td></tr></table></figure>

<h6 id="5、添加约束-建表后"><a href="#5、添加约束-建表后" class="headerlink" title="5、添加约束(建表后)"></a>5、添加约束(建表后)</h6><ul>
<li><p>添加主键：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">alter table &lt;表名&gt; add constraint pk_config_id(约束名) primary key (id);</span><br></pre></td></tr></table></figure>
</li>
<li><p>添加外键：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">alter table &lt;表名&gt; add constraint fk_record_category foreign key (cid) references category(id);</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h6 id="6、设置某字段自增长-建表后"><a href="#6、设置某字段自增长-建表后" class="headerlink" title="6、设置某字段自增长(建表后)"></a>6、设置某字段自增长(建表后)</h6><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">alter table category change id id int auto_increment;</span><br></pre></td></tr></table></figure>

<h4 id="4、TRUNCATE"><a href="#4、TRUNCATE" class="headerlink" title="4、TRUNCATE"></a>4、TRUNCATE</h4><p>截断表：清除数据，保留表结构。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">TRUNCATE TABLE &lt;表名&gt; ;</span><br></pre></td></tr></table></figure>

<h3 id="2、-数据操纵语言DML（Data-Manipulation-Language）"><a href="#2、-数据操纵语言DML（Data-Manipulation-Language）" class="headerlink" title="2、 数据操纵语言DML（Data Manipulation Language）"></a>2、 数据操纵语言DML（Data Manipulation Language）</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">UPDATE 、 INSERT 、 DELETE</span><br></pre></td></tr></table></figure>

<blockquote>
<p>主要为以上操作 即在数据库表中更新，增加和删除记录。</p>
</blockquote>
<h4 id="1、UPDATE操作"><a href="#1、UPDATE操作" class="headerlink" title="1、UPDATE操作"></a>1、UPDATE操作</h4><h6 id="1、更新表中记录"><a href="#1、更新表中记录" class="headerlink" title="1、更新表中记录"></a>1、更新表中记录</h6><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">UPDATE 表名称 SET 列名 &#x3D; 新值 WHERE 列名称 &#x3D; 某值</span><br></pre></td></tr></table></figure>

<p>使用update时候，order by 会影响查询速度，where中使用函数则会调用筛选器进行扫描，扫描表要尽量避免。</p>
<h4 id="2、INSERT操作"><a href="#2、INSERT操作" class="headerlink" title="2、INSERT操作"></a>2、INSERT操作</h4><h6 id="1、插入单条数据"><a href="#1、插入单条数据" class="headerlink" title="1、插入单条数据"></a>1、插入单条数据</h6><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">INSERT  INTO  表名 [ ( 列名 , ... ) ] VALUES  ( 值 , .... ) ;</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">INSERT  INTO  表名  [ ( 列名 , ... ) ]  SELECT ...... ;</span><br></pre></td></tr></table></figure>

<h6 id="2、插入多条数据"><a href="#2、插入多条数据" class="headerlink" title="2、插入多条数据"></a>2、插入多条数据</h6><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">INSERT  INTO  表名</span><br><span class="line">[ ( 列名 , ... ) ]  </span><br><span class="line">VALUES  </span><br><span class="line">( 值 , .... )  ,</span><br><span class="line">( 值 , .... ) , ...... ;</span><br></pre></td></tr></table></figure>



<h4 id="3、DELETE操作"><a href="#3、DELETE操作" class="headerlink" title="3、DELETE操作"></a>3、DELETE操作</h4><h6 id="1、删除记录"><a href="#1、删除记录" class="headerlink" title="1、删除记录"></a>1、删除记录</h6><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">DELETE  FROM  表名 [WHERE 条件 ];</span><br></pre></td></tr></table></figure>



<h3 id="3、数据查询语言DQL（-Data-Query-Language）"><a href="#3、数据查询语言DQL（-Data-Query-Language）" class="headerlink" title="3、数据查询语言DQL（ Data Query Language）"></a>3、数据查询语言DQL（ Data Query Language）</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SELECT </span><br></pre></td></tr></table></figure>

<blockquote>
<p>主要为以上操作 即数据表记录的查询。</p>
</blockquote>
<h6 id="1、简单查询"><a href="#1、简单查询" class="headerlink" title="1、简单查询"></a>1、简单查询</h6><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SELECT 列名 [ , ... ] FROM 表名 WHERE 条件;</span><br></pre></td></tr></table></figure>

<h3 id="4、数据控制语言-DCL（-Data-Control-Language）"><a href="#4、数据控制语言-DCL（-Data-Control-Language）" class="headerlink" title="4、数据控制语言 DCL（ Data Control Language）"></a>4、数据控制语言 DCL（ Data Control Language）</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">grant，revoke，if…else，while，begin transaction</span><br></pre></td></tr></table></figure>

<blockquote>
<p>主要为以上操作 即指用于设置用户权限和控制事务语句。</p>
</blockquote>
<h6 id="1、grant操作"><a href="#1、grant操作" class="headerlink" title="1、grant操作"></a>1、grant操作</h6><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">GRANT 权限名称 ON 数据库对象 TO 用户名@&#39;域&#39; ;</span><br><span class="line">举例:  GRANT all ON ecut.* TO ecuter@&#39;%&#39; ;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>MySQL</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
        <tag>数据库</tag>
      </tags>
  </entry>
  <entry>
    <title>单例模式</title>
    <url>/article/f1601c3e.html</url>
    <content><![CDATA[<h2 id="1、什么是单例模式？"><a href="#1、什么是单例模式？" class="headerlink" title="1、什么是单例模式？"></a>1、什么是单例模式？</h2><img src="https://gitee.com/hlmin/blog-image/raw/master/image/20210605112157.jpg" alt="yan" style="zoom:67%;">

<p>为了帮助我们更好地理解单例模式，这里借用其他文章的一段话来通俗地表达：</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">俺有 6 个漂亮的老婆，她们的老公都是我，我就是我们家里唯一的老公Sigleton，她们只要说道「老公」，都是指的同一个人，那就是我 (刚才做了个梦啦，哪有这么好的事)</span><br><span class="line"></span><br><span class="line">单例模式：单例模式确保某一个类只有一个实例，而且自行实例化并向整个系统提供这个实例单例模式。单例模式只应在有真正的 “单一实例” 的需求时才可使用。</span><br></pre></td></tr></table></figure>

<a id="more"></a>

<p>也就是说，单例模式下是不允许实例在类外部被new的，在本类里面创建好实例，再向外暴露一个获取实例的方法，给需求者进行实例调用。</p>
<p>单例模式1下有两种加载方式==&gt;【饿汉式】和【懒汉式】。我们先来看这两种方式下的最简单的单例模式代码：</p>
<p style="color:red">饿汉式：顾名思义是不管用不用，先直接创建出实例，像饿汉子一样</p>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Star</span> </span>&#123;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//1、直接创建实例</span></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Star star = <span class="keyword">new</span> Star();<span class="comment">//这个实例是唯一的实例</span></span><br><span class="line">	</span><br><span class="line">	<span class="comment">//2、将构造私有化</span></span><br><span class="line">	<span class="function"><span class="keyword">private</span> <span class="title">Star</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//3、提供一个获取本类的实例的类方法</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Star <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> star;<span class="comment">//返回唯一的实例</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>上面这种方式是线程安全的。</p>
<p>但此种⽅式并不是懒加载，也就是说⽆论你程序中是否⽤到这样的类都会在程序启动之初进⾏创建。</p>
<p>那么这种⽅式导致的问题就像你下载个游戏软件，可能你游戏地图还没有打开呢，但是程序已经将这些地图全部实例化。到你⼿机上最明显体验就⼀开游戏内存满了，⼿机卡了，需要换了。</p>
<p style="color:red">懒汉式：顾名思义是等到要用时才去创建出实例，像极了懒汉子</p>

<center>线程不安全的懒汉单例</center>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton_01</span> </span>&#123;</span><br><span class="line"> 	 <span class="keyword">private</span> <span class="keyword">static</span> Singleton_01 instance;</span><br><span class="line">     <span class="function"><span class="keyword">private</span> <span class="title">Singleton_01</span><span class="params">()</span> </span>&#123;</span><br><span class="line">     &#125;</span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton_01 <span class="title">getInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line">     <span class="keyword">if</span> (<span class="keyword">null</span> != instance) <span class="keyword">return</span> instance;</span><br><span class="line">     instance = <span class="keyword">new</span> Singleton_01();</span><br><span class="line">     <span class="keyword">return</span> instance;</span><br><span class="line"> 	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<center>线程安全的懒汉单例</center>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton_02</span> </span>&#123;</span><br><span class="line">     <span class="keyword">private</span> <span class="keyword">static</span> Singleton_02 instance;</span><br><span class="line">     <span class="function"><span class="keyword">private</span> <span class="title">Singleton_02</span><span class="params">()</span> </span>&#123;</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> Singleton_02 <span class="title">getInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line">         <span class="keyword">if</span> (<span class="keyword">null</span> != instance) <span class="keyword">return</span> instance;</span><br><span class="line">         instance = <span class="keyword">new</span> Singleton_02();</span><br><span class="line">         <span class="keyword">return</span> instance;</span><br><span class="line">     &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p style="color:red">在获取实例的方法上添加synchronized关键字，保证线程安全。</p>

<h2 id="2、双重校验锁单例（推荐）"><a href="#2、双重校验锁单例（推荐）" class="headerlink" title="2、双重校验锁单例（推荐）"></a>2、双重校验锁单例（推荐）</h2><p>从上面的代码示例可以知道，我们书写单例模式的固定三步曲为：</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">1、创建单例的静态实例变量</span><br><span class="line">2、构造方法私有化</span><br><span class="line">3、开放获取实例的静态方法</span><br></pre></td></tr></table></figure>

<p>再来看代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> 单例模式;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Administrator</span></span><br><span class="line"><span class="comment"> * @创建者: 黄乐敏</span></span><br><span class="line"><span class="comment"> * @类名: Singleton01</span></span><br><span class="line"><span class="comment"> * @类描述: 双重校验锁</span></span><br><span class="line"><span class="comment"> * @创建时间: 2021年06月05日  9:54</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton01</span> </span>&#123;</span><br><span class="line">    <span class="comment">//1、创建单例的静态实例变量</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Singleton01 instance;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * @方法描述:   2、构造方法私有化</span></span><br><span class="line"><span class="comment">     * @参数: []</span></span><br><span class="line"><span class="comment">     * @返回值类型:</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton01</span><span class="params">()</span></span>&#123;&#125;;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * @方法描述:   3、开放获取实例的静态方法</span></span><br><span class="line"><span class="comment">     * @参数: []</span></span><br><span class="line"><span class="comment">     * @返回值类型: 单例模式.Singleton01</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton01 <span class="title">getInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (instance != <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> instance;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">synchronized</span> (Singleton01.class)&#123;</span><br><span class="line">            <span class="keyword">if</span> (instance == <span class="keyword">null</span>)&#123;</span><br><span class="line">                instance = <span class="keyword">new</span> Singleton01();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> instance;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>所谓的双重校验是在实例方法内进行的，在创建实例之前，将创建实例的代码块进行synchronized加锁，然后继续判断实例是否已创建。</p>
<h2 id="3、为什么要有单例模式？"><a href="#3、为什么要有单例模式？" class="headerlink" title="3、为什么要有单例模式？"></a>3、为什么要有单例模式？</h2><p>【TODO】</p>
<h2 id="4、使用单例模式的场景？"><a href="#4、使用单例模式的场景？" class="headerlink" title="4、使用单例模式的场景？"></a>4、使用单例模式的场景？</h2><p>【TODO】</p>
]]></content>
      <categories>
        <category>设计模式</category>
      </categories>
      <tags>
        <tag>设计模式</tag>
        <tag>单例模式</tag>
      </tags>
  </entry>
  <entry>
    <title>在线教育项目（一）</title>
    <url>/article/8339bf77.html</url>
    <content><![CDATA[<h1 id="一、在线教育项目之前言"><a href="#一、在线教育项目之前言" class="headerlink" title="一、在线教育项目之前言"></a>一、在线教育项目之前言</h1><h2 id="1、学习项目之前应具备的技术栈"><a href="#1、学习项目之前应具备的技术栈" class="headerlink" title="1、学习项目之前应具备的技术栈"></a>1、学习项目之前应具备的技术栈</h2><p><img src="https://gitee.com/hlmin/blog-image/raw/master/image/%E6%8A%80%E6%9C%AF%E6%A0%88.png" alt="image-20210527152911535"></p>
<a id="more"></a>
<h2 id="2、学习项目的准备"><a href="#2、学习项目的准备" class="headerlink" title="2、学习项目的准备"></a>2、学习项目的准备</h2><p><img src="https://gitee.com/hlmin/blog-image/raw/master/image/%E5%87%86%E5%A4%87.png" alt="image-20210527153217741"></p>
<h3 id="2-1、项目背景"><a href="#2-1、项目背景" class="headerlink" title="2.1、项目背景"></a>2.1、项目背景</h3><p>是一个B2C模式的职业技能在线教育系统，分为前台用户系统和后台运营平台。</p>
<h3 id="2-2、商业模式"><a href="#2-2、商业模式" class="headerlink" title="2.2、商业模式"></a>2.2、商业模式</h3><p>此在线教育项目采用的模式为：</p>
<p><img src="https://gitee.com/hlmin/blog-image/raw/master/image/%E6%A8%A1%E5%BC%8F.png" alt="image-20210527154553325"></p>
<p>.</p>
<p>.</p>
<p>.</p>
<h3 id="2-3、技术认识（前后端分离开发）"><a href="#2-3、技术认识（前后端分离开发）" class="headerlink" title="2.3、技术认识（前后端分离开发）"></a>2.3、技术认识（前后端分离开发）</h3><p><img src="https://gitee.com/hlmin/blog-image/raw/master/image/%E5%90%8E%E7%AB%AF%E6%8A%80%E6%9C%AF.png" alt="image-20210527154903648"></p>
<p><img src="https://gitee.com/hlmin/blog-image/raw/master/image/%E5%85%B6%E4%BB%96.png" alt="image-20210527155033373"></p>
<h1 id="二、认识项目"><a href="#二、认识项目" class="headerlink" title="二、认识项目"></a>二、认识项目</h1><h2 id="1、功能简介"><a href="#1、功能简介" class="headerlink" title="1、功能简介"></a>1、功能简介</h2><p>是一个B2C模式的职业技能在线教育系统，分为前台用户系统和后台运营平台。</p>
<h2 id="2、系统模块"><a href="#2、系统模块" class="headerlink" title="2、系统模块"></a>2、系统模块</h2><p>业务模块图：</p>
<p><img src="https://gitee.com/hlmin/blog-image/raw/master/image/%E6%A8%A1%E5%9D%97%E5%9B%BE.png" alt="image-20210527201849157"></p>
<h2 id="3、系统架构"><a href="#3、系统架构" class="headerlink" title="3、系统架构"></a>3、系统架构</h2><p><strong>架构设计需要考虑的几个方面：</strong></p>
<p><strong>性能：</strong>主要考虑访问频率，每个用户每天的访问次数。项目初始阶段用户的访问量并不大，如果考</p>
<p>虑做运营推广，可能会迎来服务器访问量骤增，因此要考虑<strong>分布式部署，引入缓存</strong></p>
<p><strong>可扩展性：</strong>系统功能会随着用户量的增加以及多变的互联网用户需求不断地扩展，因此考虑到系统</p>
<p>的可扩展性的要求需要<strong>使用微服务架构，引入消息中间件</strong></p>
<p><strong>高可用：</strong>系统一旦宕机，将会带来不可挽回的损失，因此必须做负载均衡，甚至是异地多活这类复</p>
<p>杂的方案。如果数据丢失，修复将会非常麻烦，只能靠人工逐条修复，这个很难接受，因此需要考</p>
<p>虑存储高可靠。我们需要考虑多种异常情况：机器故障、机房故障，针对机器故障，我们需要设计MySQL 同机房主备方案；针对机房故障，我们需要设计 MySQL 跨机房同步方案。</p>
<p><strong>安全性：</strong>系统的信息有一定的隐私性，例如用户的个人身份信息，不包含强隐私（例如玉照、情</p>
<p>感）的信息，因此使用账号密码管理、数据库访问权限控制即可。</p>
<p><strong>成本：</strong>视频类网站的主要成本在于服务器成本、流量成本、存储成本、流媒体研发成本，中小型公</p>
<p>司可以考虑使用云服务器和云服务。</p>
<p><img src="https://gitee.com/hlmin/blog-image/raw/master/image/01.png" alt="image-20210527202014966"></p>
<p><img src="https://gitee.com/hlmin/blog-image/raw/master/image/02.png" alt="image-20210527202102867"></p>
<p><img src="https://gitee.com/hlmin/blog-image/raw/master/image/03.png" alt="image-20210527202131995"></p>
<h1 id="三、前后端分离开发介绍"><a href="#三、前后端分离开发介绍" class="headerlink" title="三、前后端分离开发介绍"></a>三、前后端分离开发介绍</h1><p>前后端分离开发是现在比较主流的开发架构：</p>
<p><img src="https://gitee.com/hlmin/blog-image/raw/master/image/%E5%89%8D%E5%90%8E%E7%AB%AF%E5%88%86%E7%A6%BB.png" alt="image-20210527160602164"></p>
]]></content>
      <categories>
        <category>项目</category>
      </categories>
      <tags>
        <tag>项目学习</tag>
        <tag>前后端分离</tag>
      </tags>
  </entry>
  <entry>
    <title>尘曲</title>
    <url>/article/85cdc7ae.html</url>
    <content><![CDATA[<p>​                        凡心所向，素履所往，生如逆旅，一苇以航。<br>​                        三月桃花，四月欢唱，两人一马，明日故乡。                        </p>
<p>​                        流浪陌路，暖然绯凉，写意人生，相识一场。<br>​                        不关此世，不负己心，我自倾杯，君且随意。</p>
<p><img src="https://gitee.com/hlmin/blog-image/raw/master/image/20210527150537.jpg" alt="a15873f56d1d6840455fe66f1fb1b220"></p>
]]></content>
      <categories>
        <category>摘录</category>
      </categories>
      <tags>
        <tag>文艺</tag>
        <tag>摘录</tag>
      </tags>
  </entry>
  <entry>
    <title>IDEA常用快捷键</title>
    <url>/article/566321e7.html</url>
    <content><![CDATA[<p><img src="https://gitee.com/hlmin/blog-image/raw/master/image/20210528212635.jpg" alt="1"></p>
<a id="more"></a>

<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">ctrl+shift+alt：多行操作</span><br><span class="line">psvm：生成main()方法；</span><br><span class="line">fori：生成for循环；</span><br><span class="line">Ctrl+Alt+v：自动补齐返回值类型</span><br><span class="line">ctrl+o：覆写方法</span><br><span class="line">ctrl+i：实现接口中的方法</span><br><span class="line">ctrl+shift+u：大小写转换</span><br><span class="line">CTRL+SHIFT+Z：取消撤销</span><br><span class="line">Alt＋Insert：生成构造方法、getter、setter</span><br><span class="line">ctrl+y：删除当前行</span><br><span class="line">Ctrl+Shift+J：将选中的行合并成一行</span><br><span class="line">ctrl+g：定位到某一行</span><br><span class="line">Ctrl+Shitft+向下箭头：将光标所在的代码块向下整体移动</span><br><span class="line">Ctrl+Shift+向上箭头：将光标所在的代码块向上整体移动</span><br><span class="line">Alt+Shift+向下箭头：将行向下移动</span><br><span class="line">Alt+Shift+向上箭头：将行向上移动</span><br><span class="line">Ctrl+F：在当前文件中查找</span><br><span class="line">Ctrl+R：替换字符串</span><br><span class="line">Ctrl+Shift+F:在全局文件中查找字符串</span><br><span class="line">Ctrl+Shift+R：在全局中替换字符串</span><br><span class="line">Ctrl+Shift+Enter：自动补齐&#123;&#125;或者分号;</span><br><span class="line">Shift+Enter：在当前行的下方开始新行</span><br><span class="line">Ctrl+Alt+Enter：在当前行的上方插入新行</span><br><span class="line">Ctrl+Delete：删除光标所在至单词结尾处的所有字符</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>工具</category>
      </categories>
      <tags>
        <tag>快捷键</tag>
        <tag>IDEA</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/article/16107.html</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<a id="more"></a>

<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
  </entry>
</search>
